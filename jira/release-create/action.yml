name: Jira Create Release
description: The composite action retrives the jira project id and version id and creates a new jira project version if none currently exists

inputs:
  release-name:
    description: 'The name of the release to create in Jira'
    required: true
  jira-project-key:
    description: 'The Jira project key for the release'
    required: true
  jira-subdomain:
    description: The subdomain of your Jira cloud instance
    required: true
  jira-email:
    description: Email of the machine user to make the call to Jira
    required: true
  jira-token:
    description: Token of the machine user to make the call to Jira
    required: true

outputs:
  project-id:
    description: "The jira project id of the provided project"
    value: ${{ steps.jira.outputs.PROJECT_ID }}
  jira-version-id:
    description: "The jira version id of the created version"
    value: ${{ steps.version.outputs.VERSION_ID }}

runs:
  using: 'composite'
  steps:
    - name: Get current information on the Project and Release
      id: jira
      shell: bash
      run: |
        PROJECT_ID=$(curl \
          --url "https://${{ inputs.jira-subdomain }}.atlassian.net/rest/api/3/project/${{ inputs.jira-project-key }}" \
          --user "${{ inputs.jira-email }}:${{ inputs.jira-token }}" | jq '.id' \
        )
        VERSION_ID=$(curl --request GET \
          --url "https://${{ inputs.jira-subdomain }}.atlassian.net/rest/api/3/project/${{ inputs.jira-project-key }}/versions" \
          --user "${{ inputs.jira-email }}:${{ inputs.jira-token }}" \
          --header "Accept: application/json" \
          | jq '.[] | select(.name=="${{ inputs.release-name }}").id' \
        )
        echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_OUTPUT
        echo "VERSION_ID=$VERSION_ID" >> $GITHUB_OUTPUT

    - name: Create release
      id: new-version
      shell: bash
      if: "${{ steps.jira.outputs.VERSION_ID == '' }}"
      run: |
        VERSION_ID=$(curl --request POST \
          --url "https://${{ inputs.jira-subdomain }}.atlassian.net/rest/api/3/version" \
          --user "${{ inputs.jira-email }}:${{ inputs.jira-token }}" \
          --header "Accept: application/json" \
          --header "Content-Type: application/json" \
          --data '{
            "archived": false,
            "name": "${{ inputs.release-name }}",
            "description": "Automatic Version Creation",
            "projectId": "${{ inputs.jira-project-key }}",
            "startDate": "'$(date +'%Y-%m-%d')'",
            "released": false
          }' | jq '.id' \
        )

    - name: Output Version id
      id: version
      shell: bash
      run: |
        if [[ "${{ steps.jira.outputs.VERSION_ID }}"=="" ]]; then
          echo "VERSION_ID=${{ steps.new-version.outputs.VERSION_ID }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION_ID=${{ steps.jira.outputs.VERSION_ID }}" >> $GITHUB_OUTPUT
        fi


